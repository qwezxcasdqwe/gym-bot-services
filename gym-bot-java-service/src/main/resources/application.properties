server.port=8080

logging.level.org.springframework=INFO
logging.level.org.telegram.telegrambots=DEBUG

telegram.webhook.url=${TELEGRAM_WEBHOOK}

telegram.bot.token=${TELEGRAM_BOT_TOKEN}
telegram.bot.username=${BOT_USERNAME}

#явное указание поменять на переменные из .env
spring.datasource.url=jdbc:postgresql://db:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true


#kafka
spring.kafka.bootstrap-servers=kafka:9092
spring.kafka.consumer.group-id=menu_consumer
spring.kafka.consumer.auto-offset-reset=earliest


# logging.level.org.apache.kafka=DEBUG
# logging.level.org.springframework.kafka=DEBUG

#menu.service.url=${MENU_SERVICE_URL}

menu.service.url=http://127.0.0.1:53099
website.url=http://localhost:3000

spring.application.name=gym-bot

resilience4j.circuitbreaker.configs.default.failure-rate-threshold=50
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=1000ms
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state=2
resilience4j.circuitbreaker.configs.default.sliding-window-size=2
resilience4j.circuitbreaker.configs.default.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=2
resilience4j.circuitbreaker.configs.default.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.configs.default.record-exceptions[0]=java.io.IOException
resilience4j.circuitbreaker.configs.default.record-exceptions[1]=java.net.ConnectException
resilience4j.circuitbreaker.configs.default.record-exceptions[2]=java.net.SocketTimeoutException
resilience4j.circuitbreaker.configs.default.record-exceptions[3]=org.springframework.web.client.ResourceAccessException

resilience4j.circuitbreaker.instances.gymBotCircuitBreaker.base-config=default



# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# Custom Metrics
management.metrics.tags.application=${spring.application.name}
management.metrics.distribution.percentiles-histogram.http.server.requests=true
