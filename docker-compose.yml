version: '3.8'

services:
  app: &backend
    build: ./gym-bot
    entrypoint: sh ./docker-entrypoint.sh
    env_file:
      - ./gym-bot/.env
    depends_on:
      - db

  web:
    <<: *backend
    command: sleep infinity
    restart: always
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - default

  microservice:
    command: sleep infinity
    restart: always
    build:
      context: ./menu-microservice
    env_file:
      - ./menu-microservice/.env
    ports:
      - "127.0.0.1:8081:8081"
    networks:
      - default
    depends_on:
      - db    

  zookeeper:
    image: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: 'bitnami/kafka:latest'
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092       
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  db:
    image: timescale/timescaledb:2.17.2-pg16
    restart: always
    env_file:
      - ./gym-bot/.env
    volumes:
      - pg_data:/var/lib/postgresql/data

  python-web:
    command: sleep infinity
    restart: always 
    build:
     context: ./python-web
    env_file: 
        - ./python-web/.env
    ports:
      - "127.0.0.1:8082:8081"
    networks:
      - default
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    env_file:
      - ./frontend/.env 
    ports:
      - "127.0.0.1:3001:8081"  
    networks: 
        - default
    depends_on:
      - db
      - python-web

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - default
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always

  grafana:
    image: grafana/grafana:9.5.2
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - default
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always

volumes:
  pg_data:
  grafana-storage:
  