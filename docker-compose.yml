version: '3.8'

services:
  app: &backend
    build: ./gym-bot
    entrypoint: sh ./docker-entrypoint.sh
    env_file:
      - ./gym-bot/.env
    depends_on:
      - db

  web:
    <<: *backend
    command: sleep infinity
    restart: always
    ports:
      - "127.0.0.1:${PORT_EXTERNAL}:8080"
    networks:
      - default

  microservice:
    command: sleep infinity
    restart: always
    build:
      context: ./menu-microservice
    env_file:
      - ./menu-microservice/.env
    ports:
      - "127.0.0.1:${PORT_EXTERNAL}:8081"
    networks:
      - default
    depends_on:
      - db    

  zookeeper:
    image: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - gym-bot-network

  db:
    image: timescale/timescaledb:2.17.2-pg16
    restart: always
    env_file:
      - ./gym-bot/.env
    volumes:
      - pg_data:/var/lib/postgresql/data

  python-web:
    command: sleep infinity
    restart: always 
    build:
     context: ./python-web
    env_file: 
        - ./python-web/.env
    ports:
      - "127.0.0.1:${PORT_EXTERNAL}:8081"
    networks:
      - default
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    env_file:
      - ./frontend/.env 
    ports:
      - "127.0.0.1:${FRONTEND_PORT}:8081"  
    networks: 
        - default
    depends_on:
      - db
      - python-web

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - gym-bot-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - gym-bot-network

volumes:
  pg_data:
  kafka_data:
  prometheus_data:
  grafana_data:

networks:
  gym-bot-network:
    driver: bridge
  